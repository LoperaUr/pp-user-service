plugins {
        id 'java'
        id 'org.springframework.boot' version '3.2.5'
        id 'io.spring.dependency-management' version '1.1.7'
        id 'jacoco'
}

group = 'com.pragma'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Test
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct
	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'


}

jacoco {
        toolVersion = "0.8.10"
}

jacocoTestReport {
        dependsOn test
        reports {
                xml.required = true
                html.required = true
        }
        classDirectories.setFrom(
                fileTree(dir: "build/classes/java/main") {
                        include "com/pragma/userservice/domain/**"
                }
        )
}

jacocoTestCoverageVerification {
        dependsOn test
        classDirectories.setFrom(
                fileTree(dir: "build/classes/java/main") {
                        include "com/pragma/userservice/domain/**"
                }
        )
        violationRules {
                rule {
                        limit {
                                counter = 'LINE'
                                value = 'COVEREDRATIO'
                                minimum = 1.0
                        }
                }
        }
}

tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}
